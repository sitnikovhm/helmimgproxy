---
# Source: imgproxy/templates/pod-disruption-budget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-imgproxy-pdb
  labels:
    imgproxy: "true"
spec:
  selector:
    matchLabels:
      app: release-name-imgproxy
---
# Source: imgproxy/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-imgproxy-service-account
  labels:
    imgproxy: "true"
  annotations:
---
# Source: imgproxy/templates/env-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-imgproxy-env-secrets
  labels:
    app: release-name-imgproxy
    chart: imgproxy-0.8.27
    release: "release-name"
    heritage: "Helm"
    imgproxy: "true"
type: kubernetes.io/Opaque
data:
  IMGPROXY_READ_TIMEOUT: "MTA=" # 10
  IMGPROXY_WRITE_TIMEOUT: "MTA=" # 10
  IMGPROXY_KEEP_ALIVE_TIMEOUT: "MTA=" # 10
  IMGPROXY_CLIENT_KEEP_ALIVE_TIMEOUT: "OTA=" # 90
  IMGPROXY_DOWNLOAD_TIMEOUT: "NQ==" # 5
  IMGPROXY_CACHE_CONTROL_PASSTHROUGH: "ZmFsc2U=" # false
  IMGPROXY_SET_CANONICAL_HEADER: "ZmFsc2U=" # false
  IMGPROXY_SO_REUSEPORT: "ZmFsc2U=" # false
  IMGPROXY_PATH_PREFIX: "L2ltZ3Byb3h5" # /imgproxy
  IMGPROXY_USE_ETAG: "ZmFsc2U=" # false
  IMGPROXY_CUSTOM_HEADERS_SEPARATOR: "Ow==" # ;
  IMGPROXY_ENABLE_DEBUG_HEADERS: "ZmFsc2U=" # false
  IMGPROXY_MAX_SRC_RESOLUTION: "MTYuOA==" # 16.8
  IMGPROXY_MAX_SRC_FILE_SIZE: "MA==" # 0
  IMGPROXY_MAX_ANIMATION_FRAMES: "MQ==" # 1
  IMGPROXY_MAX_SVG_CHECK_BYTES: "MzI3Njg=" # 32768
  IMGPROXY_IGNORE_SSL_VERIFICATION: "ZmFsc2U=" # false
  IMGPROXY_DEVELOPMENT_ERRORS_MODE: "ZmFsc2U=" # false
  IMGPROXY_AUTOQUALITY_METHOD: "bm9uZQ==" # none
  IMGPROXY_QUALITY: "ODA=" # 80
  IMGPROXY_JPEG_PROGRESSIVE: "ZmFsc2U=" # false
  IMGPROXY_JPEG_NO_SUBSAMPLE: "ZmFsc2U=" # false
  IMGPROXY_JPEG_TRELLIS_QUANT: "ZmFsc2U=" # false
  IMGPROXY_JPEG_OVERSHOOT_DERINGING: "ZmFsc2U=" # false
  IMGPROXY_JPEG_OPTIMIZE_SCANS: "ZmFsc2U=" # false
  IMGPROXY_JPEG_QUANT_TABLE: "MA==" # 0
  IMGPROXY_PNG_INTERLACED: "ZmFsc2U=" # false
  IMGPROXY_GIF_OPTIMIZE_FRAMES: "ZmFsc2U=" # false
  IMGPROXY_AVIF_SPEED: "OA==" # 8
  IMGPROXY_ENABLE_WEBP_DETECTION: "dHJ1ZQ==" # true
  IMGPROXY_ENFORCE_WEBP: "dHJ1ZQ==" # true
  IMGPROXY_ENABLE_AVIF_DETECTION: "ZmFsc2U=" # false
  IMGPROXY_ENFORCE_AVIF: "ZmFsc2U=" # false
  IMGPROXY_ENABLE_CLIENT_HINTS: "ZmFsc2U=" # false
  IMGPROXY_ENABLE_VIDEO_THUMBNAILS: "ZmFsc2U=" # false
  IMGPROXY_VIDEO_THUMBNAIL_PROBE_SIZE: "NTAwMDAwMA==" # 5000000
  IMGPROXY_VIDEO_THUMBNAIL_MAX_ANALYZE_DURATION: "MA==" # 0
  IMGPROXY_VIDEO_THUMBNAIL_SECOND: "MQ==" # 1
  IMGPROXY_WATERMARK_OPACITY: "MQ==" # 1
  IMGPROXY_WATERMARK_CACHE_SIZE: "MjU2" # 256
  IMGPROXY_UNSHARPENING_MODE: "YXV0bw==" # auto
  IMGPROXY_UNSHARPENING_WEIGHT: "MQ==" # 1
  IMGPROXY_UNSHARPENING_DIVIDOR: "MjQ=" # 24
  IMGPROXY_FALLBACK_IMAGE_HTTP_CODE: "MjAw" # 200
  IMGPROXY_FALLBACK_IMAGES_CACHE_SIZE: "MjU2" # 256
  IMGPROXY_PREFERRED_FORMATS: "anBlZyxwbmcsZ2lm" # jpeg,png,gif
  IMGPROXY_USE_S3: "dHJ1ZQ==" # true
  AWS_ACCESS_KEY_ID: "Y0xkVktqdDcxVzlKWGhpYg==" # cLdVKjt71W9JXhib
  AWS_SECRET_ACCESS_KEY: "eFR6ZkFBZmVaSk1FUVFnQUtRMHduNlBaalF6U002Vmk=" # xTzfAAfeZJMEQQgAKQ0wn6PZjQzSM6Vi
  IMGPROXY_S3_ENDPOINT: "aHR0cDovL21pbmlvLmdlbmVyYWw6OTAwMA==" # http://minio.general:9000
  IMGPROXY_REPORT_DOWNLOADING_ERRORS: "dHJ1ZQ==" # true
  IMGPROXY_LOG_FORMAT: "cHJldHR5" # pretty
  IMGPROXY_LOG_LEVEL: "aW5mbw==" # info
  IMGPROXY_DOWNLOAD_BUFFER_SIZE: "MA==" # 0
  IMGPROXY_GZIP_BUFFER_SIZE: "MA==" # 0
  IMGPROXY_FREE_MEMORY_INTERVAL: "MTA=" # 10
  IMGPROXY_BUFFER_POOL_CALIBRATION_THRESHOLD: "MTAyNA==" # 1024
  IMGPROXY_USE_LINEAR_COLORSPACE: "ZmFsc2U=" # false
  IMGPROXY_DISABLE_SHRINK_ON_LOAD: "ZmFsc2U=" # false
  IMGPROXY_STRIP_METADATA: "dHJ1ZQ==" # true
  IMGPROXY_STRIP_COLOR_PROFILE: "dHJ1ZQ==" # true
  IMGPROXY_AUTO_ROTATE: "dHJ1ZQ==" # true
  IMGPROXY_ENFORCE_THUMBNAIL: "ZmFsc2U=" # false
---
# Source: imgproxy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-imgproxy"
  labels:
    app: "release-name"
    chart: imgproxy-0.8.27
    heritage: "Helm"
    imgproxy: "true"
    release: "release-name"
spec:
  type: "ClusterIP"
  selector:
    app: "release-name-imgproxy"
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
---
# Source: imgproxy/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-imgproxy
  labels:
    heritage: "Helm"
    release: "release-name"
    chart: imgproxy-0.8.27
    app: release-name-imgproxy
  annotations: 
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: release-name-imgproxy
  template:
    metadata:
      labels:
        app: release-name-imgproxy
        imgproxy: "true"
        release: "release-name"
      annotations:
        checksum/env: cac05215d9b763af49d8fa5535c999632a03b695e04db20386b0a0ff55f2bf86
    spec:
      affinity: 
        {}
      tolerations: 
        []
      nodeSelector: 
        {}
      serviceAccountName: "release-name-imgproxy-service-account"
      containers:
        - name: "imgproxy"
          image: "darthsim/imgproxy:v3.13.1"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: release-name-imgproxy-env-secrets
          resources: 
            limits:
              cpu: 1000m
              memory: 4Gi
            requests:
              cpu: 1000m
              memory: 4Gi
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /imgproxy/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            timeoutSeconds: 50
            successThreshold: 1
            failureThreshold: 5
          livenessProbe:
            httpGet:
              path: /imgproxy/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 50
            timeoutSeconds: 60
            successThreshold: 1
            failureThreshold: 5
---
# Source: imgproxy/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-imgproxy
  labels:
    app: release-name-imgproxy
    chart: imgproxy-0.8.27
    release: "release-name"
    heritage: "Helm"
    imgproxy: "true"
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: "igs-dev1.domoy.ru"
      http:
        paths:
          - path: "/imgproxy/"
            pathType: "ImplementationSpecific"
            backend:
              service:
                name: "release-name-imgproxy"
                port:
                  number: 80
